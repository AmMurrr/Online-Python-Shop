from project_pages.selling_page import show_selling_page
# from project_pages.cart_page import show_cart_page
# from project_pages.admin_page import show_admin_page
# from project_pages.account_page import show_account_page
# import repositories.account
import streamlit as st
# import bcrypt

# import services.cookies

import logging
import log_config

Admin_ids =[1] # ID –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤
st.session_state.is_admin = True
st.session_state.logged_in = 1


st.set_page_config("TerraVentura",page_icon='random')

def sign_in(mail, password):# 
    user_id = repositories.account.get_sign_in(mail) # –∏—â–µ–º –≤ –ë–î –∞–π–¥–∏ –ø–æ –ø–æ—á—Ç–µ

    if not user_id : # –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç
        logging.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return -1

    hashed_password = repositories.account.get_hash(user_id) # –ø–æ–ª—É—á–∞–µ–º —Ö—ç—à –∏–∑ –ë–î

    if not bcrypt.checkpw(password.encode('utf-8'),hashed_password.encode('utf-8')): # –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è 
        logging.info("–ü–∞—Ä–æ–ª–∏ –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç")
        return -1

    if user_id in Admin_ids:
        logging.info(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {user_id} –≤–æ—à–µ–ª –≤ –∞–∫–∫–∞—É–Ω—Ç")
        st.session_state.is_admin = True

    return user_id
    

def password_hashing(password):
    salt = bcrypt.gensalt()
    hashed_password = bcrypt.hashpw(password.encode('utf-8'),salt)
    logging.info("–ü–∞—Ä–æ–ª—å –∑–∞—Ö—ç—à–∏—Ä–æ–≤–∞–Ω")
    return hashed_password

def is_mail_used(mail):
    mails = repositories.account.get_mails()
    for mail_item in mails:
        if mail == mail_item["mail"]:
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å –ø–æ—á—Ç–æ–π {mail} —É–∂–µ –µ—Å—Ç—å")
            return True
    return False

def sign_up(login, mail, password, birth_date):
    if is_mail_used(mail):
        logging.info(f"–ê–∫–∫–∞—É–Ω—Ç —Å –ø–æ—á—Ç–æ–π {mail} —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
        return -1

    new_user_id = repositories.account.add_user(login,mail,birth_date)

    hashed_password = password_hashing(password)
    repositories.account.add_hash(new_user_id,hashed_password.decode('utf-8'))
    return new_user_id

def check_input(login,password, mail):
    logging.info("–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å, –ø–æ—á—Ç—É –∏ –ª–æ–≥–∏–Ω")
    check_counter = 0
    if len(login) >= 3 and not login.isspace():
        check_counter += 1
    if len(mail) >= 5 and mail.find("@") > 0:
        check_counter += 1
    if len(password) > 4 and not password.isdigit():
        check_counter += 1
    
    if check_counter == 3:
        return True
    else:
        return False

@st.dialog("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
def signing_up():

    st.write("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω")
    login = st.text_input("  ")
    st.write("–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É")
    mail = st.text_input(" ")
    st.write("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
    password = st.text_input("–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –Ω–µ –º–µ–Ω–µ–µ 24 —Å–∏–º–≤–æ–ª–æ–≤, —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –∑–∞–≥–ª–∞–≤–Ω—É—é –±—É–∫–≤—É, —Ü–∏—Ñ—Ä—É, —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Å–∏–º–≤–æ–ª,—ç–º–æ–¥–∑–∏, –∏–µ—Ä–æ–≥–ª–∏—Ñ –∏ —É–∑–µ–ª–∫–æ–≤–æ–µ –ø–∏—Å—å–º–æ –∏–Ω–∫–æ–≤",type="password" )
    st.write("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ—é –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è")
    birth_date = st.date_input(" ")

    if st.button("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å "):
        if check_input(login,password,mail): 

            valid_user_check = sign_up(login,mail,password,birth_date)
            if valid_user_check != -1:
                logging.info(f"–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {valid_user_check}")
                st.session_state.logged_in = valid_user_check

                token = services.cookies.generate_jwt(valid_user_check) 
                services.cookies.set_cookie("auth_token",token) # creating cookie

                st.rerun()
            else:
                logging.info("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç")
                st.write("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞")
            
            
        else:
            st.write("–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã")


@st.dialog("–í—Ö–æ–¥")
def signing_in():

    st.write("–í–≤–µ–¥–∏—Ç–µ –ø–æ—á—Ç—É")
    mail = st.text_input(" ",key = -1)
    st.write("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")
    password = st.text_input(" ",key = -2,type="password")

    if st.button(" –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å",):
        valid_user_check = sign_in(mail,password)
        if valid_user_check != -1:
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {valid_user_check} –≤–æ—à–µ–ª –≤ –∞–∫–∫–∞—É–Ω—Ç")
            st.session_state.logged_in = valid_user_check

            token = services.cookies.generate_jwt(valid_user_check) 
            services.cookies.set_cookie("auth_token",token) # creating cookie

            st.rerun()
        else:
            logging.info("–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏")
            st.write("–ü–æ—á—Ç–∞ –∏–ª–∏ –ø–∞—Ä–æ–ª—å –Ω–µ–≤–µ—Ä–Ω—ã")


if "logged_in" not in st.session_state:
    st.session_state.logged_in = -1    

if "is_admin" not in st.session_state:
    st.session_state.is_admin = False 

if "key" not in st.query_params:
    st.query_params.key="0"

def main():
    # st.sidebar.title("TerraVentura")
    # st.sidebar.subheader("–ú–∞–≥–∞–∑–∏–Ω —Ç—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è")
    # st.sidebar.write("Ad astra per aspera!")

    # if st.session_state.logged_in < 0 :
    #     token = services.cookies.get_cookie("auth_token") # check for cookie
    #     if token:
    #         user_id = services.cookies.verify_jwt(token)
    #         if user_id:
    #             logging.info(f"{user_id} –í–æ—à—ë–ª –≤ –∞–∫–∫–∞—É–Ω—Ç –ø–æ –∫—É–∫–∏")
    #             st.session_state.logged_in = user_id
    #             st.session_state.is_admin = True if user_id in Admin_ids else False
                    

    # if st.session_state.logged_in < 0:
    #     if st.sidebar.button("üîº –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è"):
    #         logging.info("–í—ã–±—Ä–∞–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
    #         signing_up()
    #     if st.sidebar.button("üîΩ –í–æ–π—Ç–∏"):
    #         logging.info("–í—ã–±—Ä–∞–Ω –≤—Ö–æ–¥")
    #         signing_in()

    pages = ["–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤","–ö–æ—Ä–∑–∏–Ω–∞","–ê–∫–∫–∞—É–Ω—Ç"]
    # if "is_admin" in st.session_state and st.session_state.is_admin == True:
    #     pages.append("–ü–∞–Ω–µ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
    

    page = st.sidebar.radio("–í—ã–±—Ä–∞–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞",pages)

    if page == "–ö–∞—Ç–∞–ª–æ–≥ —Ç–æ–≤–∞—Ä–æ–≤":
        logging.info(f"–í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")
        show_selling_page()
    if page == "–ö–æ—Ä–∑–∏–Ω–∞":
        if st.session_state.logged_in > 0:
            logging.info(f"–í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")
            # show_cart_page()
        else:
            st.write("## –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç")
    if page == "–ê–∫–∫–∞—É–Ω—Ç":
        if st.session_state.logged_in > 0:
            logging.info(f"–í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")
            # show_account_page()
        else:
            st.write("## –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç")
    if page == "–ü–∞–Ω–µ–ª—å –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞":
            logging.info(f"–í—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ {page}")
            # show_admin_page()
    
        
            


if __name__=="__main__":
    main()

# ad4fb8d1 - –ø–∞—Ä–æ–ª—å –¥–ª—è –∞–π–¥–∏ 1

