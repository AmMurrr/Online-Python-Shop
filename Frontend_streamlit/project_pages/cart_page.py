# import streamlit as st 
# import repositories.cart
# from services.sales import SaleService
# from datetime import date
# from repositories.media import get_image

# import logging
# import log_config

# @st.cache_data
# def find_product_by_id(product_id,products):
#     for product in products:
#         if product["product_id"] == product_id:
#             return product
#     return None

# def get_cart_products():
#     logging.info(f"–ü–æ–ª—É—á–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {st.session_state.logged_in}")
#     return repositories.cart.get_cart_products(st.session_state.logged_in)

# def cart_clearing():
#     logging.info(f"–ß–∏—Å—Ç–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {st.session_state.logged_in}")
#     repositories.cart.clear_cart(st.session_state.logged_in)

# def create_sale(cart_products,total_cost):
#     sale_date = date.today()
#     sale_id = SaleService.process_sale(st.session_state.logged_in, cart_products,sale_date,total_cost)
#     return sale_id

# def update_cart_product(product_id,change):
#     user_id = st.session_state.logged_in
#     match change:
#         case 1:
#             logging.info(f"–£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ {product_id} –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
#             repositories.cart.add_to_cart(user_id,product_id)
#         case -1:
#             logging.info(f"–£–º–µ–Ω—å—à–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ {product_id} –≤ –∫–æ—Ä–∑–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
#             repositories.cart.take_from_cart(user_id,product_id)
#         case 0:
#             logging.info(f"–∏—Å–∫–ª—é—á–∞–µ–º —Ç–æ–≤–∞—Ä {product_id} –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
#             repositories.cart.remove_from_cart(user_id,product_id)


# def get_product_image(product_id):
#     image = get_image(product_id)
    
#     if image:
#         logging.info(f"–ü–æ–ª—É—á–∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ {product_id}")
#         return bytes(image[0]["picture"])
#     else:
#         logging.info(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
#         return None

# @st.dialog("–ü–æ–∫—É–ø–∫–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
# def success_sale(sale_id):
#     st.header("–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à –æ–Ω–ª–∞–π–Ω-–º–∞–≥–∞–∑–∏–Ω!")
#     st.success(f"–í–∞—à —á–µ–∫ ‚Ññ{sale_id}")
#     st.balloons()
#     if st.button("–ó–∞–∫—Ä—ã—Ç—å"):
#         st.rerun()

# def show_cart_page():
#     st.title("üõí –ö–æ—Ä–∑–∏–Ω–∞ —Ç–æ–≤–∞—Ä–æ–≤")
#     total_cost = 0

#     # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Ç–æ–≤–∞—Ä–∞—Ö –≤ –∫–æ—Ä–∑–∏–Ω–µ
#     cart_products = get_cart_products()

#     if not cart_products:
#         st.write("–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
#         return

#     # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω–µ
#     for item in cart_products:
#         with st.container(border=True):
#             product_id = item["product_id"]
#             amount = item["amount"]
#             product = find_product_by_id(product_id,st.session_state.products)
#             if not product:
#                 st.warning(f"–¢–æ–≤–∞—Ä —Å ID {product_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–∞–ª–æ–≥–µ")
#                 continue

#             product_name = product["product_name"]
#             cost = product["cost"]
#             stored_amount = product["amount"]
#             product_image = get_product_image(product_id)

#             total_cost += cost * amount

#             col1, col2, col3 = st.columns([1, 3, 1])

#             with col1:
#                 # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
#                 if product_image:
#                     st.image(product_image)
#                 else:
#                     st.warning("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

#             with col2:
#                 # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ
#                 st.subheader(product_name)
#                 st.write(f"–¶–µ–Ω–∞: {cost} ‚ÇΩ")
#                 st.write(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {amount}")


#                 # –ö–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞
#                 if st.button("‚ûñ –£–º–µ–Ω—å—à–∏—Ç—å", key=f"decrease-{product_id}"):
#                     if amount > 1:
#                         update_cart_product( product_id, -1)
#                     else:
#                         update_cart_product( product_id, 0) 
#                     st.rerun()

#                 if st.button("‚ûï –£–≤–µ–ª–∏—á–∏—Ç—å", key=f"increase-{product_id}"):
#                     if stored_amount - amount > 0:
#                         update_cart_product( product_id, 1)
#                         st.rerun()
#                     else:
#                         st.warning("–ü—Ä–µ–≤—ã—à–µ–Ω–æ —á–∏—Å–ª–æ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Å–∫–ª–∞–¥–µ")

#             with col3:
#                 # –ö–Ω–æ–ø–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–∞
#                 if st.button("‚ùå –£–¥–∞–ª–∏—Ç—å", key=f"delete-{product_id}"):
#                     update_cart_product( product_id, 0)
#                     st.rerun()

#     # –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫–æ—Ä–∑–∏–Ω—ã
#     st.write(f"### –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_cost} ‚ÇΩ")
#     sale_btn = st.button("–ö—É–ø–∏—Ç—å")
#     # –æ—Ñ–æ—Ä–º–µ–ª–Ω–∏–µ? 
#     if sale_btn:
#         logging.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∫—É–ø–∫–∏")
#         sale_id = create_sale(cart_products,total_cost)
#         if sale_id != -1: 
#             cart_clearing()
#             logging.info(f"–ü–æ–∫—É–ø–∫–∞ {sale_id} –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!")
#             success_sale(sale_id)
#         else:
#             logging.info("–ü–æ–∫—É–ø–∫–∞ –Ω–µ –ø—Ä–æ—à–ª–∞")
#             st.warning("–ü—Ä–æ–±–ª–µ–º—ã —Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º –ø–æ–∫—É–ø–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")